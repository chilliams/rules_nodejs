load("@npm//@bazel/esbuild:index.bzl", "esbuild")
load("@npm//google-closure-compiler:index.bzl", "google_closure_compiler")
load("@npm//http-server:index.bzl", "http_server")

google_closure_compiler(
    name = "closure",
    outs = ["closure.js"],
    args = [
        "--dependency_mode=PRUNE",
        "--module_resolution=NODE",
        "--process_common_js_modules=true",
        "--entry_point=hello",
        "--js=hello.js",
        "--js=node_modules/react/package.json",
        "--js=node_modules/react/**.js",
        "--js=node_modules/react-dom/package.json",
        "--js=node_modules/react-dom/**.js",
        "--js=node_modules/scheduler/package.json",
        "--js=node_modules/scheduler/**.js",
        "--js_output_file=$@",
    ],
    data = [
        "hello.js",
        "@npm//react",
        "@npm//react-dom",
    ],
)

# React likes to use process.env.NODE_ENV. Closure can't dead-code elminate
# process.env.NODE_ENV if statements under its SIMPLE compilation level. This
# uses esbuild to handle setting process.env.NODE_ENV and eliminating unused
# code.
esbuild(
    name = "hello_compiled",
    entry_point = "closure.js",
    minify = True,
    deps = [
        ":closure",
    ],
)

http_server(
    name = "server",
    data = [
        "hello.html",
        ":closure",
        ":hello_compiled",
    ],
    templated_args = [
        "--bazel_patch_module_resolver",
    ],
)
